
AVR_SPI_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000742  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006af  00000000  00000000  0000090a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a5  00000000  00000000  00000fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001260  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040b  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  000016bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000016fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_17>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  78:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_17>:




//SPI transfer complete Interrupt Service Routine
ISR(SPI_STC_vect){
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	8f 93       	push	r24

		PORTD = SPDR;
  8c:	8e b5       	in	r24, 0x2e	; 46
  8e:	8b b9       	out	0x0b, r24	; 11
}
  90:	8f 91       	pop	r24
  92:	0f 90       	pop	r0
  94:	0f be       	out	0x3f, r0	; 63
  96:	0f 90       	pop	r0
  98:	1f 90       	pop	r1
  9a:	18 95       	reti

0000009c <_Z19spi_init_slave_modev>:

void spi_init_slave_mode(){
	//set MISO pin to output
	//the rest are left to inputs by default
	MISO_PORT_DIRECTION |= (1<<MISO_PIN);
  9c:	24 9a       	sbi	0x04, 4	; 4
	//enable the SPI and SPI interrupt
	SPCR |= (1<<SPE)|(1<<SPIE);
  9e:	8c b5       	in	r24, 0x2c	; 44
  a0:	80 6c       	ori	r24, 0xC0	; 192
  a2:	8c bd       	out	0x2c, r24	; 44
	//enable global interrupt
	sei();
  a4:	78 94       	sei
  a6:	08 95       	ret

000000a8 <main>:
}

int main(void)
{
	spi_init_slave_mode();
  a8:	0e 94 4e 00 	call	0x9c	; 0x9c <_Z19spi_init_slave_modev>
	DDRC |= (1<<PINC0);
  ac:	38 9a       	sbi	0x07, 0	; 7
	DDRD = 0b11111111;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	8a b9       	out	0x0a, r24	; 10
	
	 while (1) {
		 PORTC ^= (1<<PINC0);
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	88 b1       	in	r24, 0x08	; 8
  b6:	89 27       	eor	r24, r25
  b8:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	39 e6       	ldi	r19, 0x69	; 105
  be:	88 e1       	ldi	r24, 0x18	; 24
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	30 40       	sbci	r19, 0x00	; 0
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x18>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x22>
  ca:	00 00       	nop
  cc:	f3 cf       	rjmp	.-26     	; 0xb4 <main+0xc>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
